package com.shangame.fiction.ui.wifi.nanohttpd;import android.util.Log;import com.shangame.fiction.ui.wifi.WifiBean;import org.nanohttpd.protocols.http.ClientHandler;import org.nanohttpd.protocols.http.IHTTPSession;import org.nanohttpd.protocols.http.NanoHTTPD;import org.nanohttpd.protocols.http.ProgressClientHandler;import org.nanohttpd.protocols.http.progress.ProgressListener;import org.nanohttpd.protocols.http.request.Method;import org.nanohttpd.protocols.http.response.Response;import java.io.IOException;import java.io.InputStream;import java.net.Inet4Address;import java.net.InetAddress;import java.net.NetworkInterface;import java.net.Socket;import java.net.SocketException;import java.util.ArrayList;import java.util.Enumeration;import java.util.Hashtable;import java.util.regex.Matcher;import java.util.regex.Pattern;public class HttpServer extends NanoHTTPD {    private final Hashtable<Method, ArrayList<Pair>> mDispatchers;    private ProgressListener mProgressListener;    public boolean serverIsRunning = false;    private static class Pair {        Pattern regex;        IDispatcher dispatcher;    }    public HttpServer(int port, ProgressListener progressListener) {        this(null, port, progressListener);    }    public HttpServer(String hostname, int port, ProgressListener progressListener) {        super(hostname, port);        setTempFileManagerFactory(new UploadFileManagerFactory());        mDispatchers = new Hashtable<>();        this.mProgressListener = progressListener;    }    public void startServer() throws IOException {        if (!serverIsRunning) {            start();            WifiBean.getInstance().fileTotal = 0;            serverIsRunning = true;        }    }    public void stopServer() {        stop();        WifiBean.getInstance().fileTotal = 0;        serverIsRunning = false;    }    public void setProgressListener(ProgressListener progressListener) {        this.mProgressListener = progressListener;    }    @Override    protected ClientHandler createClientHandler(final Socket finalAccept, final InputStream inputStream) {        return new ProgressClientHandler(this, inputStream, finalAccept, mProgressListener);    }    public HttpServer register(Method method, String pattern, IDispatcher dispatcher) {        Pair p = new Pair();        p.regex = Pattern.compile("^" + pattern);        p.dispatcher = dispatcher;        synchronized (mDispatchers) {            ArrayList<Pair> pairs = mDispatchers.get(method);            if (pairs == null) {                pairs = new ArrayList<>();                mDispatchers.put(method, pairs);            }            pairs.add(p);        }        return this;    }    @Override    public Response handle(IHTTPSession session) {        Method method = session.getMethod();        String path = session.getUri().split("\\?")[0];        IDispatcher match = null;        synchronized (mDispatchers) {            ArrayList<Pair> pairs = mDispatchers.get(method);            if (pairs != null) {                for (Pair p : pairs) {                    Matcher m = p.regex.matcher(path);                    if (m.matches()) {                        match = p.dispatcher;                        break;                    }                }            }        }        if (match != null) {            return match.handle(session);        }        return super.handle(session);    }    @Override    public String getHostname() {        try {            Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces();            while (en.hasMoreElements()) {                NetworkInterface nif = en.nextElement();                Enumeration<InetAddress> inet = nif.getInetAddresses();                while (inet.hasMoreElements()) {                    InetAddress ip = inet.nextElement();                    if (!ip.isLoopbackAddress() && ip instanceof Inet4Address) {                        return ip.getHostAddress();                    }                }            }        } catch (SocketException e) {            Log.e("hhh", "SocketException");        }        return super.getHostname();    }}