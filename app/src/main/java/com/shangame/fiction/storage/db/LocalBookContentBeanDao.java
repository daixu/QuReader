package com.shangame.fiction.storage.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shangame.fiction.net.response.LocalBookContentBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_BOOK_CONTENT_BEAN".
*/
public class LocalBookContentBeanDao extends AbstractDao<LocalBookContentBean, String> {

    public static final String TABLENAME = "LOCAL_BOOK_CONTENT_BEAN";

    /**
     * Properties of entity LocalBookContentBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DurChapterUrl = new Property(0, String.class, "durChapterUrl", true, "DUR_CHAPTER_URL");
        public final static Property DurChapterIndex = new Property(1, int.class, "durChapterIndex", false, "DUR_CHAPTER_INDEX");
        public final static Property DurChapterContent = new Property(2, String.class, "durChapterContent", false, "DUR_CHAPTER_CONTENT");
    }


    public LocalBookContentBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocalBookContentBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_BOOK_CONTENT_BEAN\" (" + //
                "\"DUR_CHAPTER_URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: durChapterUrl
                "\"DUR_CHAPTER_INDEX\" INTEGER NOT NULL ," + // 1: durChapterIndex
                "\"DUR_CHAPTER_CONTENT\" TEXT);"); // 2: durChapterContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_BOOK_CONTENT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalBookContentBean entity) {
        stmt.clearBindings();
 
        String durChapterUrl = entity.getDurChapterUrl();
        if (durChapterUrl != null) {
            stmt.bindString(1, durChapterUrl);
        }
        stmt.bindLong(2, entity.getDurChapterIndex());
 
        String durChapterContent = entity.getDurChapterContent();
        if (durChapterContent != null) {
            stmt.bindString(3, durChapterContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalBookContentBean entity) {
        stmt.clearBindings();
 
        String durChapterUrl = entity.getDurChapterUrl();
        if (durChapterUrl != null) {
            stmt.bindString(1, durChapterUrl);
        }
        stmt.bindLong(2, entity.getDurChapterIndex());
 
        String durChapterContent = entity.getDurChapterContent();
        if (durChapterContent != null) {
            stmt.bindString(3, durChapterContent);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LocalBookContentBean readEntity(Cursor cursor, int offset) {
        LocalBookContentBean entity = new LocalBookContentBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // durChapterUrl
            cursor.getInt(offset + 1), // durChapterIndex
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // durChapterContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalBookContentBean entity, int offset) {
        entity.setDurChapterUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDurChapterIndex(cursor.getInt(offset + 1));
        entity.setDurChapterContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LocalBookContentBean entity, long rowId) {
        return entity.getDurChapterUrl();
    }
    
    @Override
    public String getKey(LocalBookContentBean entity) {
        if(entity != null) {
            return entity.getDurChapterUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalBookContentBean entity) {
        return entity.getDurChapterUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
