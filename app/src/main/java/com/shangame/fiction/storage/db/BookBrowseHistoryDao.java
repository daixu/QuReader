package com.shangame.fiction.storage.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shangame.fiction.storage.model.BookBrowseHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_BROWSE_HISTORY".
*/
public class BookBrowseHistoryDao extends AbstractDao<BookBrowseHistory, Long> {

    public static final String TABLENAME = "BOOK_BROWSE_HISTORY";

    /**
     * Properties of entity BookBrowseHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BoId = new Property(0, String.class, "boId", false, "BO_ID");
        public final static Property Bookid = new Property(1, long.class, "bookid", true, "_id");
        public final static Property Bookname = new Property(2, String.class, "bookname", false, "BOOKNAME");
        public final static Property Bookcover = new Property(3, String.class, "bookcover", false, "BOOKCOVER");
        public final static Property ReadTime = new Property(4, long.class, "readTime", false, "READ_TIME");
        public final static Property Bookshelves = new Property(5, int.class, "bookshelves", false, "BOOKSHELVES");
        public final static Property ChapteId = new Property(6, long.class, "chapteId", false, "CHAPTE_ID");
        public final static Property PageIndex = new Property(7, int.class, "pageIndex", false, "PAGE_INDEX");
        public final static Property Chapternumber = new Property(8, int.class, "chapternumber", false, "CHAPTERNUMBER");
        public final static Property IsLocal = new Property(9, boolean.class, "isLocal", false, "IS_LOCAL");
        public final static Property Booktype = new Property(10, int.class, "booktype", false, "BOOKTYPE");
    }


    public BookBrowseHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public BookBrowseHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_BROWSE_HISTORY\" (" + //
                "\"BO_ID\" TEXT," + // 0: boId
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 1: bookid
                "\"BOOKNAME\" TEXT," + // 2: bookname
                "\"BOOKCOVER\" TEXT," + // 3: bookcover
                "\"READ_TIME\" INTEGER NOT NULL ," + // 4: readTime
                "\"BOOKSHELVES\" INTEGER NOT NULL ," + // 5: bookshelves
                "\"CHAPTE_ID\" INTEGER NOT NULL ," + // 6: chapteId
                "\"PAGE_INDEX\" INTEGER NOT NULL ," + // 7: pageIndex
                "\"CHAPTERNUMBER\" INTEGER NOT NULL ," + // 8: chapternumber
                "\"IS_LOCAL\" INTEGER NOT NULL ," + // 9: isLocal
                "\"BOOKTYPE\" INTEGER NOT NULL );"); // 10: booktype
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_BROWSE_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookBrowseHistory entity) {
        stmt.clearBindings();
 
        String boId = entity.getBoId();
        if (boId != null) {
            stmt.bindString(1, boId);
        }
        stmt.bindLong(2, entity.getBookid());
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(3, bookname);
        }
 
        String bookcover = entity.getBookcover();
        if (bookcover != null) {
            stmt.bindString(4, bookcover);
        }
        stmt.bindLong(5, entity.getReadTime());
        stmt.bindLong(6, entity.getBookshelves());
        stmt.bindLong(7, entity.getChapteId());
        stmt.bindLong(8, entity.getPageIndex());
        stmt.bindLong(9, entity.getChapternumber());
        stmt.bindLong(10, entity.getIsLocal() ? 1L: 0L);
        stmt.bindLong(11, entity.getBooktype());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookBrowseHistory entity) {
        stmt.clearBindings();
 
        String boId = entity.getBoId();
        if (boId != null) {
            stmt.bindString(1, boId);
        }
        stmt.bindLong(2, entity.getBookid());
 
        String bookname = entity.getBookname();
        if (bookname != null) {
            stmt.bindString(3, bookname);
        }
 
        String bookcover = entity.getBookcover();
        if (bookcover != null) {
            stmt.bindString(4, bookcover);
        }
        stmt.bindLong(5, entity.getReadTime());
        stmt.bindLong(6, entity.getBookshelves());
        stmt.bindLong(7, entity.getChapteId());
        stmt.bindLong(8, entity.getPageIndex());
        stmt.bindLong(9, entity.getChapternumber());
        stmt.bindLong(10, entity.getIsLocal() ? 1L: 0L);
        stmt.bindLong(11, entity.getBooktype());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 1);
    }    

    @Override
    public BookBrowseHistory readEntity(Cursor cursor, int offset) {
        BookBrowseHistory entity = new BookBrowseHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // boId
            cursor.getLong(offset + 1), // bookid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookcover
            cursor.getLong(offset + 4), // readTime
            cursor.getInt(offset + 5), // bookshelves
            cursor.getLong(offset + 6), // chapteId
            cursor.getInt(offset + 7), // pageIndex
            cursor.getInt(offset + 8), // chapternumber
            cursor.getShort(offset + 9) != 0, // isLocal
            cursor.getInt(offset + 10) // booktype
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookBrowseHistory entity, int offset) {
        entity.setBoId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookid(cursor.getLong(offset + 1));
        entity.setBookname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookcover(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReadTime(cursor.getLong(offset + 4));
        entity.setBookshelves(cursor.getInt(offset + 5));
        entity.setChapteId(cursor.getLong(offset + 6));
        entity.setPageIndex(cursor.getInt(offset + 7));
        entity.setChapternumber(cursor.getInt(offset + 8));
        entity.setIsLocal(cursor.getShort(offset + 9) != 0);
        entity.setBooktype(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookBrowseHistory entity, long rowId) {
        entity.setBookid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookBrowseHistory entity) {
        if(entity != null) {
            return entity.getBookid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookBrowseHistory entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
