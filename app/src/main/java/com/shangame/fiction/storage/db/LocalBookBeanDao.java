package com.shangame.fiction.storage.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shangame.fiction.storage.model.LocalBookBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_BOOK_BEAN".
*/
public class LocalBookBeanDao extends AbstractDao<LocalBookBean, String> {

    public static final String TABLENAME = "LOCAL_BOOK_BEAN";

    /**
     * Properties of entity LocalBookBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property StrId = new Property(0, String.class, "strId", true, "STR_ID");
        public final static Property BookId = new Property(1, long.class, "bookId", false, "BOOK_ID");
        public final static Property ChapterNumber = new Property(2, int.class, "chapterNumber", false, "CHAPTER_NUMBER");
        public final static Property ChapterId = new Property(3, long.class, "chapterId", false, "CHAPTER_ID");
        public final static Property BookCover = new Property(4, String.class, "bookCover", false, "BOOK_COVER");
        public final static Property BookName = new Property(5, String.class, "bookName", false, "BOOK_NAME");
        public final static Property Author = new Property(6, String.class, "author", false, "AUTHOR");
        public final static Property UpdState = new Property(7, int.class, "updState", false, "UPD_STATE");
        public final static Property RecState = new Property(8, int.class, "recState", false, "REC_STATE");
        public final static Property IsPicked = new Property(9, boolean.class, "isPicked", false, "IS_PICKED");
        public final static Property UpdChapter = new Property(10, int.class, "updChapter", false, "UPD_CHAPTER");
        public final static Property Updating = new Property(11, int.class, "updating", false, "UPDATING");
        public final static Property LastModifyTime = new Property(12, long.class, "lastModifyTime", false, "LAST_MODIFY_TIME");
        public final static Property Booktype = new Property(13, int.class, "booktype", false, "BOOKTYPE");
        public final static Property IsLocal = new Property(14, boolean.class, "isLocal", false, "IS_LOCAL");
        public final static Property Path = new Property(15, String.class, "path", false, "PATH");
    }


    public LocalBookBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocalBookBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_BOOK_BEAN\" (" + //
                "\"STR_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: strId
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 1: bookId
                "\"CHAPTER_NUMBER\" INTEGER NOT NULL ," + // 2: chapterNumber
                "\"CHAPTER_ID\" INTEGER NOT NULL ," + // 3: chapterId
                "\"BOOK_COVER\" TEXT," + // 4: bookCover
                "\"BOOK_NAME\" TEXT," + // 5: bookName
                "\"AUTHOR\" TEXT," + // 6: author
                "\"UPD_STATE\" INTEGER NOT NULL ," + // 7: updState
                "\"REC_STATE\" INTEGER NOT NULL ," + // 8: recState
                "\"IS_PICKED\" INTEGER NOT NULL ," + // 9: isPicked
                "\"UPD_CHAPTER\" INTEGER NOT NULL ," + // 10: updChapter
                "\"UPDATING\" INTEGER NOT NULL ," + // 11: updating
                "\"LAST_MODIFY_TIME\" INTEGER NOT NULL ," + // 12: lastModifyTime
                "\"BOOKTYPE\" INTEGER NOT NULL ," + // 13: booktype
                "\"IS_LOCAL\" INTEGER NOT NULL ," + // 14: isLocal
                "\"PATH\" TEXT);"); // 15: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_BOOK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalBookBean entity) {
        stmt.clearBindings();
 
        String strId = entity.getStrId();
        if (strId != null) {
            stmt.bindString(1, strId);
        }
        stmt.bindLong(2, entity.getBookId());
        stmt.bindLong(3, entity.getChapterNumber());
        stmt.bindLong(4, entity.getChapterId());
 
        String bookCover = entity.getBookCover();
        if (bookCover != null) {
            stmt.bindString(5, bookCover);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(6, bookName);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(7, author);
        }
        stmt.bindLong(8, entity.getUpdState());
        stmt.bindLong(9, entity.getRecState());
        stmt.bindLong(10, entity.getIsPicked() ? 1L: 0L);
        stmt.bindLong(11, entity.getUpdChapter());
        stmt.bindLong(12, entity.getUpdating());
        stmt.bindLong(13, entity.getLastModifyTime());
        stmt.bindLong(14, entity.getBooktype());
        stmt.bindLong(15, entity.getIsLocal() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(16, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalBookBean entity) {
        stmt.clearBindings();
 
        String strId = entity.getStrId();
        if (strId != null) {
            stmt.bindString(1, strId);
        }
        stmt.bindLong(2, entity.getBookId());
        stmt.bindLong(3, entity.getChapterNumber());
        stmt.bindLong(4, entity.getChapterId());
 
        String bookCover = entity.getBookCover();
        if (bookCover != null) {
            stmt.bindString(5, bookCover);
        }
 
        String bookName = entity.getBookName();
        if (bookName != null) {
            stmt.bindString(6, bookName);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(7, author);
        }
        stmt.bindLong(8, entity.getUpdState());
        stmt.bindLong(9, entity.getRecState());
        stmt.bindLong(10, entity.getIsPicked() ? 1L: 0L);
        stmt.bindLong(11, entity.getUpdChapter());
        stmt.bindLong(12, entity.getUpdating());
        stmt.bindLong(13, entity.getLastModifyTime());
        stmt.bindLong(14, entity.getBooktype());
        stmt.bindLong(15, entity.getIsLocal() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(16, path);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public LocalBookBean readEntity(Cursor cursor, int offset) {
        LocalBookBean entity = new LocalBookBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // strId
            cursor.getLong(offset + 1), // bookId
            cursor.getInt(offset + 2), // chapterNumber
            cursor.getLong(offset + 3), // chapterId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bookCover
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bookName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // author
            cursor.getInt(offset + 7), // updState
            cursor.getInt(offset + 8), // recState
            cursor.getShort(offset + 9) != 0, // isPicked
            cursor.getInt(offset + 10), // updChapter
            cursor.getInt(offset + 11), // updating
            cursor.getLong(offset + 12), // lastModifyTime
            cursor.getInt(offset + 13), // booktype
            cursor.getShort(offset + 14) != 0, // isLocal
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalBookBean entity, int offset) {
        entity.setStrId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBookId(cursor.getLong(offset + 1));
        entity.setChapterNumber(cursor.getInt(offset + 2));
        entity.setChapterId(cursor.getLong(offset + 3));
        entity.setBookCover(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBookName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAuthor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdState(cursor.getInt(offset + 7));
        entity.setRecState(cursor.getInt(offset + 8));
        entity.setIsPicked(cursor.getShort(offset + 9) != 0);
        entity.setUpdChapter(cursor.getInt(offset + 10));
        entity.setUpdating(cursor.getInt(offset + 11));
        entity.setLastModifyTime(cursor.getLong(offset + 12));
        entity.setBooktype(cursor.getInt(offset + 13));
        entity.setIsLocal(cursor.getShort(offset + 14) != 0);
        entity.setPath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final String updateKeyAfterInsert(LocalBookBean entity, long rowId) {
        return entity.getStrId();
    }
    
    @Override
    public String getKey(LocalBookBean entity) {
        if(entity != null) {
            return entity.getStrId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocalBookBean entity) {
        return entity.getStrId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
