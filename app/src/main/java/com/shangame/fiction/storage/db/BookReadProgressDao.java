package com.shangame.fiction.storage.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shangame.fiction.storage.model.BookReadProgress;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_READ_PROGRESS".
*/
public class BookReadProgressDao extends AbstractDao<BookReadProgress, Long> {

    public static final String TABLENAME = "BOOK_READ_PROGRESS";

    /**
     * Properties of entity BookReadProgress.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookId = new Property(0, long.class, "bookId", true, "_id");
        public final static Property ChapterId = new Property(1, long.class, "chapterId", false, "CHAPTER_ID");
        public final static Property PageIndex = new Property(2, int.class, "pageIndex", false, "PAGE_INDEX");
        public final static Property ChapterIndex = new Property(3, int.class, "chapterIndex", false, "CHAPTER_INDEX");
    }


    public BookReadProgressDao(DaoConfig config) {
        super(config);
    }
    
    public BookReadProgressDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_READ_PROGRESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: bookId
                "\"CHAPTER_ID\" INTEGER NOT NULL ," + // 1: chapterId
                "\"PAGE_INDEX\" INTEGER NOT NULL ," + // 2: pageIndex
                "\"CHAPTER_INDEX\" INTEGER NOT NULL );"); // 3: chapterIndex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_READ_PROGRESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookReadProgress entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBookId());
        stmt.bindLong(2, entity.getChapterId());
        stmt.bindLong(3, entity.getPageIndex());
        stmt.bindLong(4, entity.getChapterIndex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookReadProgress entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBookId());
        stmt.bindLong(2, entity.getChapterId());
        stmt.bindLong(3, entity.getPageIndex());
        stmt.bindLong(4, entity.getChapterIndex());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BookReadProgress readEntity(Cursor cursor, int offset) {
        BookReadProgress entity = new BookReadProgress( //
            cursor.getLong(offset + 0), // bookId
            cursor.getLong(offset + 1), // chapterId
            cursor.getInt(offset + 2), // pageIndex
            cursor.getInt(offset + 3) // chapterIndex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookReadProgress entity, int offset) {
        entity.setBookId(cursor.getLong(offset + 0));
        entity.setChapterId(cursor.getLong(offset + 1));
        entity.setPageIndex(cursor.getInt(offset + 2));
        entity.setChapterIndex(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookReadProgress entity, long rowId) {
        entity.setBookId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookReadProgress entity) {
        if(entity != null) {
            return entity.getBookId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookReadProgress entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
