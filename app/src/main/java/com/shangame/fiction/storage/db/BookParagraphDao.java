package com.shangame.fiction.storage.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shangame.fiction.storage.model.BookParagraph;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_PARAGRAPH".
*/
public class BookParagraphDao extends AbstractDao<BookParagraph, Long> {

    public static final String TABLENAME = "BOOK_PARAGRAPH";

    /**
     * Properties of entity BookParagraph.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Index = new Property(0, Long.class, "index", true, "_id");
        public final static Property Pid = new Property(1, long.class, "pid", false, "PID");
        public final static Property BookId = new Property(2, long.class, "bookId", false, "BOOK_ID");
        public final static Property ChapterId = new Property(3, long.class, "chapterId", false, "CHAPTER_ID");
        public final static Property Paragraph = new Property(4, String.class, "paragraph", false, "PARAGRAPH");
    }


    public BookParagraphDao(DaoConfig config) {
        super(config);
    }
    
    public BookParagraphDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_PARAGRAPH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: index
                "\"PID\" INTEGER NOT NULL ," + // 1: pid
                "\"BOOK_ID\" INTEGER NOT NULL ," + // 2: bookId
                "\"CHAPTER_ID\" INTEGER NOT NULL ," + // 3: chapterId
                "\"PARAGRAPH\" TEXT);"); // 4: paragraph
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_PARAGRAPH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookParagraph entity) {
        stmt.clearBindings();
 
        Long index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(1, index);
        }
        stmt.bindLong(2, entity.getPid());
        stmt.bindLong(3, entity.getBookId());
        stmt.bindLong(4, entity.getChapterId());
 
        String paragraph = entity.getParagraph();
        if (paragraph != null) {
            stmt.bindString(5, paragraph);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookParagraph entity) {
        stmt.clearBindings();
 
        Long index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(1, index);
        }
        stmt.bindLong(2, entity.getPid());
        stmt.bindLong(3, entity.getBookId());
        stmt.bindLong(4, entity.getChapterId());
 
        String paragraph = entity.getParagraph();
        if (paragraph != null) {
            stmt.bindString(5, paragraph);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookParagraph readEntity(Cursor cursor, int offset) {
        BookParagraph entity = new BookParagraph( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // index
            cursor.getLong(offset + 1), // pid
            cursor.getLong(offset + 2), // bookId
            cursor.getLong(offset + 3), // chapterId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // paragraph
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookParagraph entity, int offset) {
        entity.setIndex(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPid(cursor.getLong(offset + 1));
        entity.setBookId(cursor.getLong(offset + 2));
        entity.setChapterId(cursor.getLong(offset + 3));
        entity.setParagraph(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookParagraph entity, long rowId) {
        entity.setIndex(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookParagraph entity) {
        if(entity != null) {
            return entity.getIndex();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookParagraph entity) {
        return entity.getIndex() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
